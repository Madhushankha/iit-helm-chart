{{- $chartName := .Chart.Name -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $chartName }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "app.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "app.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ $chartName }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repositoryName }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.httpGetPath }}
              port: http
            periodSeconds: 10
            timeoutSeconds: 10
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.httpGetPath }}
              port: http
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 10
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          # volumeMounts:
          #   - name: secrets-store01-inline
          #     mountPath: "/mnt/secrets-store"
          #     readOnly: true
          # {{- with .Values.volumeMounts }}
          #   {{- toYaml . | nindent 12 }}
          # {{- end }}
          envFrom:
          - configMapRef:
              name: common-env-variables
          env:
            {{- range .Values.envs }}
            - name: {{ .key }}
              value: {{ .value | quote }}
            {{- end }}
            # {{- range .Values.vaultSecrets }}
            # - name: {{ .key }}
            #   valueFrom:
            #     secretKeyRef:
            #       name: {{ $chartName }}-secret
            #       key: {{ .objectName }}
            # {{- end }}
      # volumes:
      #   - name: secrets-store01-inline
      #     csi:
      #       driver: secrets-store.csi.k8s.io
      #       readOnly: true
      #       volumeAttributes:
      #         secretProviderClass: "kvname-system-msi-{{ $chartName }}"
      {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}